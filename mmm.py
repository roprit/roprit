import logging
import json
import os
import re
import sqlite3
from datetime import datetime, date
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import math

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "8368020354:AAH2fOMICkzWAI6d8y1lUL8xN-rvfRrrykE"
CREATOR_CHAT_ID = 7759987050
SPECIAL_USER_ID = 7759987050
DATA_FILE = "users_data.json"

# üî• –ù–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
PRICE_PER_MINUTE = 0.65  # 0.5$ –∑–∞ –º–∏–Ω—É—Ç—É

# üî• –î–û–ë–ê–í–õ–Ø–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–´–ô –¢–û–ü (–Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
TOP_EARNERS_DATA_FILE = "top_earners.json"

# –í–∫–ª—é—á–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


# JSON Database functions
def init_json_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if not os.path.exists(DATA_FILE):
            default_data = {
                "users": {},
                "rentals": {},
                "pending_messages": {},
                "settings": {
                    "last_rental_id": 0,
                    "last_message_id": 0
                }
            }
            save_json_data(default_data)
            logger.info("‚úÖ JSON database initialized successfully")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            data = load_json_data()
            needs_save = False

            if "settings" not in data:
                data["settings"] = {
                    "last_rental_id": 0,
                    "last_message_id": 0
                }
                needs_save = True

            if "rentals" not in data:
                data["rentals"] = {}
                needs_save = True

            if "pending_messages" not in data:
                data["pending_messages"] = {}
                needs_save = True

            if needs_save:
                save_json_data(data)
                logger.info("‚úÖ JSON database structure updated")

        # üî• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª –¥–ª—è —Ç–æ–ø–∞ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏—Ö
        init_top_earners_db()

    except Exception as e:
        logger.error(f"‚ùå JSON database initialization error: {e}")


def init_top_earners_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–ø–∞ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏—Ö"""
    try:
        if not os.path.exists(TOP_EARNERS_DATA_FILE):
            default_data = {
                "all_time_top": [],
                "last_updated": datetime.now().isoformat()
            }
            with open(TOP_EARNERS_DATA_FILE, 'w', encoding='utf-8') as f:
                json.dump(default_data, f, ensure_ascii=False, indent=2)
            logger.info("‚úÖ Top earners database initialized successfully")
    except Exception as e:
        logger.error(f"‚ùå Top earners database initialization error: {e}")


def update_top_earners():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–∞ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏—Ö"""
    try:
        users = get_all_users_with_earnings()

        top_data = {
            "all_time_top": users[:20],  # –¢–æ–ø-20 –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
            "last_updated": datetime.now().isoformat()
        }

        with open(TOP_EARNERS_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(top_data, f, ensure_ascii=False, indent=2)

        logger.info("‚úÖ Top earners updated successfully")
        return True
    except Exception as e:
        logger.error(f"‚ùå Error updating top earners: {e}")
        return False


def get_top_earners():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏—Ö"""
    try:
        if os.path.exists(TOP_EARNERS_DATA_FILE):
            with open(TOP_EARNERS_DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
            return data.get("all_time_top", [])
        return []
    except Exception as e:
        logger.error(f"‚ùå Error getting top earners: {e}")
        return []


async def handle_admin_panel_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await admin_panel(update, context)


def load_json_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON"""
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
            if "users" not in data:
                data["users"] = {}
            if "rentals" not in data:
                data["rentals"] = {}
            if "pending_messages" not in data:
                data["pending_messages"] = {}
            if "settings" not in data:
                data["settings"] = {"last_rental_id": 0, "last_message_id": 0}

            return data

        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            "users": {},
            "rentals": {},
            "pending_messages": {},
            "settings": {
                "last_rental_id": 0,
                "last_message_id": 0
            }
        }
    except Exception as e:
        logger.error(f"‚ùå Error loading JSON data: {e}")
        return {
            "users": {},
            "rentals": {},
            "pending_messages": {},
            "settings": {
                "last_rental_id": 0,
                "last_message_id": 0
            }
        }


def save_json_data(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON"""
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logger.error(f"‚ùå Error saving JSON data: {e}")
        return False


def ensure_admin_user():
    """–°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ"""
    try:
        data = load_json_data()
        admin_id_str = str(CREATOR_CHAT_ID)

        if admin_id_str not in data["users"]:
            data["users"][admin_id_str] = {
                "username": "admin_bot",
                "referrer_id": None,
                "balance": 0.0,
                "total_earnings": 0.0,
                "referral_earnings": 0.0,
                "registered_date": datetime.now().isoformat(),
                "has_access": True
            }
            if save_json_data(data):
                logger.info(f"‚úÖ Admin user {CREATOR_CHAT_ID} created successfully")
            else:
                logger.error(f"‚ùå Failed to create admin user {CREATOR_CHAT_ID}")
        else:
            # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
            if not data["users"][admin_id_str].get("has_access"):
                data["users"][admin_id_str]["has_access"] = True
                save_json_data(data)
                logger.info(f"‚úÖ Admin user {CREATOR_CHAT_ID} access enabled")
            else:
                logger.info(f"‚úÖ Admin user {CREATOR_CHAT_ID} already exists with access")

    except Exception as e:
        logger.error(f"‚ùå Error ensuring admin user: {e}")


def get_user(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    data = load_json_data()
    user_str = str(user_id)
    user_data = data["users"].get(user_str)

    if user_data:
        logger.info(f"‚úÖ User {user_id} found: {user_data}")
    else:
        logger.info(f"‚ùå User {user_id} not found in database")

    return user_data


def add_user(user_id, username, referrer_id=None, has_access=False):
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = load_json_data()
    user_str = str(user_id)

    # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data["users"][user_str] = {
        "username": username,
        "referrer_id": referrer_id,
        "balance": 0.0,
        "total_earnings": 0.0,
        "referral_earnings": 0.0,
        "registered_date": datetime.now().isoformat(),
        "has_access": has_access
    }

    success = save_json_data(data)
    if success:
        logger.info(f"‚úÖ User {user_id} added/updated with access: {has_access}, referrer: {referrer_id}")
    else:
        logger.error(f"‚ùå Failed to save user {user_id}")

    return success


def update_user_earnings(user_id, earnings, referral_earnings=0):
    """–û–±–Ω–æ–≤–∏—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = load_json_data()
        user_str = str(user_id)

        if user_str in data["users"]:
            if "total_earnings" not in data["users"][user_str]:
                data["users"][user_str]["total_earnings"] = 0.0
            if "referral_earnings" not in data["users"][user_str]:
                data["users"][user_str]["referral_earnings"] = 0.0

            data["users"][user_str]["total_earnings"] = round(data["users"][user_str]["total_earnings"] + earnings, 2)
            data["users"][user_str]["referral_earnings"] = round(
                data["users"][user_str]["referral_earnings"] + referral_earnings, 2)

            if save_json_data(data):
                logger.info(f"‚úÖ User {user_id} earnings updated: +{earnings}$, referral: +{referral_earnings}$")

                # üî• –û–ë–ù–û–í–õ–Ø–ï–ú –¢–û–ü –ü–†–ò –ò–ó–ú–ï–ù–ï–ù–ò–ò –ó–ê–†–ê–ë–û–¢–ö–ê
                update_top_earners()

                return True

        return False
    except Exception as e:
        logger.error(f"‚ùå Error updating user earnings {user_id}: {e}")
        return False


def reset_all_earnings():
    """–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        data = load_json_data()

        for user_id, user_data in data["users"].items():
            user_data["total_earnings"] = 0.0
            user_data["referral_earnings"] = 0.0
            user_data["balance"] = 0.0

        if save_json_data(data):
            logger.info("‚úÖ All user earnings reset to zero")
            return True
        return False
    except Exception as e:
        logger.error(f"‚ùå Error resetting all earnings: {e}")
        return False


def reset_today_earnings():
    """–°–±—Ä–æ—Å–∏—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        data = load_json_data()
        today = date.today().isoformat()
        reset_count = 0

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_id, user_data in data["users"].items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            user_date = user_data.get("last_earnings_update", user_data.get("registered_date", ""))
            if user_date.startswith(today):
                user_data["total_earnings"] = 0.0
                user_data["referral_earnings"] = 0.0
                user_data["balance"] = 0.0
                reset_count += 1

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞—Ä–µ–Ω–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_rentals = []
        for rental_id, rental_data in data["rentals"].items():
            rental_date = rental_data.get("rental_date", "")
            if rental_date.startswith(today):
                today_rentals.append(rental_id)

        for rental_id in today_rentals:
            del data["rentals"][rental_id]

        if save_json_data(data):
            logger.info(f"‚úÖ Today's earnings reset: {reset_count} users, {len(today_rentals)} rentals")
            return True, reset_count, len(today_rentals)
        return False, 0, 0

    except Exception as e:
        logger.error(f"‚ùå Error resetting today's earnings: {e}")
        return False, 0, 0


def add_rental(renter_id, phone_number, duration_minutes=None, earnings=None, referrer_id=None, message_id=None,
               actual_minutes=None):
    """–î–æ–±–∞–≤–∏—Ç—å –∞—Ä–µ–Ω–¥—É"""
    try:
        data = load_json_data()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ settings —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if "settings" not in data:
            data["settings"] = {"last_rental_id": 0, "last_message_id": 0}

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π ID –∞—Ä–µ–Ω–¥—ã
        rental_id = data["settings"]["last_rental_id"] + 1

        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã
        rental_data = {
            "renter_id": renter_id,
            "phone_number": phone_number,
            "rental_date": datetime.now().isoformat(),
            "status": "active"
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        if duration_minutes is not None:
            rental_data["duration_minutes"] = float(duration_minutes)
        if earnings is not None:
            rental_data["earnings"] = float(earnings)
        if referrer_id is not None:
            rental_data["referrer_id"] = referrer_id
        if message_id is not None:
            rental_data["message_id"] = message_id
        if actual_minutes is not None:
            rental_data["actual_minutes"] = float(actual_minutes)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä–µ–Ω–¥—É
        data["rentals"][str(rental_id)] = rental_data
        data["settings"]["last_rental_id"] = rental_id

        if save_json_data(data):
            logger.info(f"‚úÖ Rental added: ID {rental_id}, User {renter_id}, Phone {phone_number}")
            return rental_id
        else:
            logger.error("‚ùå Failed to save rental data")
            return None

    except Exception as e:
        logger.error(f"‚ùå Error adding rental for user {renter_id}: {e}")
        return None


def update_rental_earnings(rental_id, actual_minutes, earnings):
    """–û–±–Ω–æ–≤–∏—Ç—å –∞—Ä–µ–Ω–¥—É —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        data = load_json_data()
        rental_str = str(rental_id)

        if rental_str in data["rentals"]:
            data["rentals"][rental_str]["actual_minutes"] = float(actual_minutes)
            data["rentals"][rental_str]["earnings"] = float(earnings)
            data["rentals"][rental_str]["status"] = "completed"
            data["rentals"][rental_str]["completed_date"] = datetime.now().isoformat()

            if save_json_data(data):
                logger.info(f"‚úÖ Rental {rental_id} updated successfully: {actual_minutes}min, ${earnings}")
                return True
            else:
                logger.error(f"‚ùå Failed to save rental {rental_id} data")
                return False
        else:
            logger.error(f"‚ùå Rental {rental_id} not found in database")
            return False

    except Exception as e:
        logger.error(f"‚ùå Error updating rental {rental_id}: {e}")
        return False


def add_pending_message(rental_id, user_id, message_text, message_type="text"):
    """–î–æ–±–∞–≤–∏—Ç—å –æ–∂–∏–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        data = load_json_data()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ settings —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if "settings" not in data:
            data["settings"] = {"last_rental_id": 0, "last_message_id": 0}

        message_id = data["settings"]["last_message_id"] + 1

        data["pending_messages"][str(message_id)] = {
            "rental_id": rental_id,
            "user_id": user_id,
            "message_text": message_text,
            "message_type": message_type,
            "status": "pending",
            "created_date": datetime.now().isoformat()
        }

        data["settings"]["last_message_id"] = message_id

        if save_json_data(data):
            return message_id
        return None
    except Exception as e:
        logger.error(f"‚ùå Error adding pending message: {e}")
        return None


def get_rental_by_message_id(message_id):
    """–ù–∞–π—Ç–∏ –∞—Ä–µ–Ω–¥—É –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è"""
    data = load_json_data()
    for rental_id, rental in data["rentals"].items():
        if rental.get("message_id") == message_id:
            return (
                int(rental_id),  # id
                rental["renter_id"],  # renter_id
                rental["phone_number"],  # phone_number
                rental.get("duration_minutes"),  # duration_minutes
                rental.get("earnings"),  # earnings
                rental.get("referrer_id"),  # referrer_id
                rental["rental_date"],  # rental_date
                rental["status"],  # status
                rental.get("message_id"),  # message_id
                rental.get("actual_minutes")  # actual_minutes
            )
    return None


def get_user_rentals(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∞—Ä–µ–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = load_json_data()
    user_rentals = []

    for rental_id, rental in data["rentals"].items():
        if rental["renter_id"] == user_id:
            user_rentals.append((
                int(rental_id),  # id
                rental["renter_id"],  # renter_id
                rental["phone_number"],  # phone_number
                rental.get("duration_minutes"),  # duration_minutes
                rental.get("earnings"),  # earnings
                rental.get("referrer_id"),  # referrer_id
                rental["rental_date"],  # rental_date
                rental["status"],  # status
                rental.get("message_id"),  # message_id
                rental.get("actual_minutes")  # actual_minutes
            ))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    user_rentals.sort(key=lambda x: x[6], reverse=True)
    return user_rentals


def get_referrer_stats(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞"""
    try:
        data = load_json_data()
        referral_count = 0
        total_commission = 0.0
        referral_rentals = []

        # –°—á–∏—Ç–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –∏—Ö –∞—Ä–µ–Ω–¥—ã
        for uid, user_data in data.get("users", {}).items():
            if user_data.get("referrer_id") == user_id:
                referral_count += 1

                # –ù–∞—Ö–æ–¥–∏–º –∞—Ä–µ–Ω–¥—ã —ç—Ç–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                referral_id = int(uid)
                for rental_id, rental in data.get("rentals", {}).items():
                    if rental.get("renter_id") == referral_id and rental.get("actual_minutes"):
                        minutes = rental.get("actual_minutes", 0)
                        earnings = rental.get("earnings", 0)
                        commission = earnings * 0.1
                        total_commission += commission

                        referral_rentals.append({
                            "user_id": referral_id,
                            "username": user_data.get("username", f"user_{referral_id}"),
                            "phone": rental.get("phone_number"),
                            "minutes": minutes,
                            "earnings": earnings,
                            "commission": commission,
                            "date": rental.get("completed_date", rental.get("rental_date"))
                        })

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        referral_rentals.sort(key=lambda x: x["date"], reverse=True)

        return (referral_count, total_commission, referral_rentals)

    except Exception as e:
        logger.error(f"‚ùå Error in get_referrer_stats for user {user_id}: {e}")
        return (0, 0.0, [])


def get_all_users_with_earnings():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º"""
    try:
        data = load_json_data()
        users_with_earnings = []

        for user_id, user_data in data.get("users", {}).items():
            total_earnings = user_data.get("total_earnings", 0)
            referral_earnings = user_data.get("referral_earnings", 0)
            overall_earnings = total_earnings + referral_earnings

            if overall_earnings > 0:
                users_with_earnings.append({
                    "user_id": int(user_id),
                    "username": user_data.get("username", f"user_{user_id}"),
                    "total_earnings": total_earnings,
                    "referral_earnings": referral_earnings,
                    "overall_earnings": overall_earnings
                })

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É –∑–∞—Ä–∞–±–æ—Ç–∫—É (—É–±—ã–≤–∞–Ω–∏–µ)
        users_with_earnings.sort(key=lambda x: x["overall_earnings"], reverse=True)
        return users_with_earnings

    except Exception as e:
        logger.error(f"‚ùå Error getting users with earnings: {e}")
        return []


def get_detailed_stats():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        data = load_json_data()

        total_users = len(data.get("users", {}))
        total_rentals = len(data.get("rentals", {}))
        completed_rentals = len([r for r in data.get("rentals", {}).values() if r.get("status") == "completed"])

        total_earnings = 0
        total_minutes = 0

        for rental in data.get("rentals", {}).values():
            if rental.get("status") == "completed":
                total_earnings += rental.get("earnings", 0)
                total_minutes += rental.get("actual_minutes", 0)

        users_with_earnings = get_all_users_with_earnings()

        return {
            "total_users": total_users,
            "total_rentals": total_rentals,
            "completed_rentals": completed_rentals,
            "total_earnings": round(total_earnings, 2),
            "total_minutes": round(total_minutes, 2),
            "users_with_earnings": users_with_earnings,
            "top_earners": users_with_earnings[:5] if users_with_earnings else []
        }

    except Exception as e:
        logger.error(f"‚ùå Error getting detailed stats: {e}")
        return {
            "total_users": 0,
            "total_rentals": 0,
            "completed_rentals": 0,
            "total_earnings": 0,
            "total_minutes": 0,
            "users_with_earnings": [],
            "top_earners": []
        }


# –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
def validate_phone_number(phone):
    try:
        cleaned_phone = re.sub(r'[^\d+]', '', phone)

        # –†–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞
        russian_patterns = [
            r'^\+7\d{10}$',  # +79123456789
            r'^8\d{10}$',  # 89123456789
            r'^7\d{10}$',  # 79123456789
        ]

        # –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞
        kazakh_patterns = [
            r'^\+77\d{9}$',  # +77123456789
            r'^87\d{9}$',  # 87123456789
            r'^77\d{9}$',  # 77123456789
        ]

        for pattern in russian_patterns + kazakh_patterns:
            if re.match(pattern, cleaned_phone):
                return cleaned_phone

        return None
    except Exception as e:
        logger.error(f"‚ùå Error validating phone {phone}: {e}")
        return None


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
def generate_referral_link(user_id):
    return f"https://t.me/Whatsapp_Luxury_bot?start={user_id}"


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ)
def has_access(user_id):
    try:
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø
        if user_id in [CREATOR_CHAT_ID, SPECIAL_USER_ID]:
            logger.info(f"‚úÖ User {user_id} has access (admin/special)")
            return True

        user_data = get_user(user_id)
        if user_data and user_data.get("has_access"):
            logger.info(f"‚úÖ User {user_id} has access (registered with referral)")
            return True

        logger.info(f"‚ùå User {user_id} NO ACCESS - data: {user_data}")
        return False

    except Exception as e:
        logger.error(f"‚ùå Error checking access for {user_id}: {e}")
        return False


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        logger.info(f"üë§ User {user.id} started the bot with args: {context.args}")

        # üî• –ü–†–û–í–ï–†–ö–ê USERNAME
        if not user.username:
            await update.message.reply_text(
                "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ! –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username*\n\n"
                "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.\n\n"
                "*–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username:*\n"
                "1. –û—Ç–∫—Ä–æ–π—Ç–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram\n"
                "2. –ù–∞–∂–º–∏—Ç–µ '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'\n"
                "3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'\n"
                "4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n\n"
                "‚ùï *–í–∞–∂–Ω–æ:* –ï—Å–ª–∏ –≤—ã —Å–º–µ–Ω–∏—Ç–µ username –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç, "
                "–≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π!\n\n"
                "–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ username –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start",
                parse_mode='Markdown'
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        referral_id = None
        user_has_access = False

        if context.args and len(context.args) > 0 and context.args[0].startswith('ref'):
            try:
                referral_id = int(context.args[0][3:])
                logger.info(f"üîó Referral link detected: {referral_id} for user {user.id}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä
                referrer = get_user(referral_id)
                if referrer:
                    logger.info(f"‚úÖ Referrer {referral_id} found")
                    user_has_access = True

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                    try:
                        referrer_name = referrer.get("username", f"user_{referral_id}")
                        await context.bot.send_message(
                            chat_id=referral_id,
                            text=f"üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}"
                        )
                        logger.info(f"‚úÖ Notification sent to referrer {referral_id}")
                    except Exception as e:
                        logger.error(f"‚ùå Error notifying referrer {referral_id}: {e}")
                else:
                    # –†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–∞–µ–º –¥–æ—Å—Ç—É–ø
                    logger.warning(f"‚ùå Referrer {referral_id} not found, but granting access anyway")
                    user_has_access = True

            except (ValueError, IndexError) as e:
                logger.error(f"‚ùå Error processing referral link: {e}")
                user_has_access = True  # –î–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        else:
            logger.info(f"üìõ No referral link for user {user.id}")
            # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–∞–∂–µ –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
            user_has_access = True

        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        existing_user = get_user(user.id)

        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –¥–æ—Å—Ç—É–ø
        if existing_user and existing_user.get("has_access"):
            user_has_access = True
            logger.info(f"‚úÖ User {user.id} already has access, preserving it")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
        add_user(user.id, user.username, referral_id, user_has_access)

        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–∞–µ–º –¥–æ—Å—Ç—É–ø –≤—Å–µ–º –∫—Ç–æ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É username
        if not has_access(user.id):
            await update.message.reply_text(
                "‚ùå *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!*\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @kolprey",
                parse_mode='Markdown'
            )
            return

        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        keyboard = [
            [KeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä –≤ –∞—Ä–µ–Ω–¥—É")],
            [KeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"), KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton("üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"), KeyboardButton("üèÜ –¢–æ–ø –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏—Ö")],
            [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ]

        # üî• –î–û–ë–ê–í–õ–Ø–ï–ú –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ –î–õ–Ø –°–û–ó–î–ê–¢–ï–õ–Ø
        if user.id == CREATOR_CHAT_ID:
            keyboard.append([KeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")])

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        welcome_text = f"–ü—Ä–∏–≤–µ—Ç, @{user.username}!\n\n"
        welcome_text += "üì± *WhatsApp –ê—Ä–µ–Ω–¥–∞ –ë–æ—Ç*\n\n"
        welcome_text += "–°–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ WhatsApp –Ω–æ–º–µ—Ä–∞ –≤ –∞—Ä–µ–Ω–¥—É –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ!\n\n"
        welcome_text += f"üí∞ *–¢–∞—Ä–∏—Ñ:* {PRICE_PER_MINUTE}$ –∑–∞ –º–∏–Ω—É—Ç—É\n\n"
        welcome_text += f"üí≥ *–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞:* 3–º–∏–Ω—É—Ç—ã\n\n"
        welcome_text += "üë• –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –ª—é–¥–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞ –Ω–∏—Ö –≤—ã–ø–ª–∞—Ç—É"

        if referral_id:
            referrer_user = get_user(referral_id)
            referrer_name = referrer_user.get("username",
                                              f"user_{referral_id}") if referrer_user else f"user_{referral_id}"
            welcome_text += f"\n\n–í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: @{referrer_name}"

        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
        logger.info(f"‚úÖ User {user.id} successfully started the bot with access")

    except Exception as e:
        logger.error(f"‚ùå Error in start command for user {user.id}: {e}")
        await update.message.reply_text(
            "‚ùå *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!*\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.\n\n"
        )


# üî• –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user

        if user.id != CREATOR_CHAT_ID:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return

        keyboard = [
            [KeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º")],
            [KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∏")],
            [KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        admin_text = "üëë *–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å*\n\n"
        admin_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        await update.message.reply_text(admin_text, reply_markup=reply_markup, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"‚ùå Error in admin_panel: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")


async def handle_admin_detailed_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    try:
        user = update.effective_user

        if user.id != CREATOR_CHAT_ID:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return

        stats = get_detailed_stats()

        stats_text = "üìä *–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{stats['total_users']}*\n"
        stats_text += f"üìà –í—Å–µ–≥–æ –∞—Ä–µ–Ω–¥: *{stats['total_rentals']}*\n"
        stats_text += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∞—Ä–µ–Ω–¥: *{stats['completed_rentals']}*\n"
        stats_text += f"‚è± –í—Å–µ–≥–æ –º–∏–Ω—É—Ç: *{stats['total_minutes']}*\n"
        stats_text += f"üí∞ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: *{stats['total_earnings']}$*\n\n"

        if stats['top_earners']:
            stats_text += "üèÜ *–¢–æ–ø-5 –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏—Ö:*\n"
            for i, earner in enumerate(stats['top_earners'], 1):
                username_display = f"@{earner['username']}" if not earner['username'].startswith(
                    'user_') else f"ID: {earner['user_id']}"
                stats_text += f"{i}. {username_display} - *{earner['overall_earnings']}$*\n"
        else:
            stats_text += "üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º"

        await update.message.reply_text(stats_text, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"‚ùå Error in handle_admin_detailed_stats: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


async def handle_admin_users_with_earnings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º"""
    try:
        user = update.effective_user

        if user.id != CREATOR_CHAT_ID:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return

        users = get_all_users_with_earnings()

        if not users:
            await update.message.reply_text("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º")
            return

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        users_text = "üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º*\n\n"

        for i, user_data in enumerate(users, 1):
            username_display = f"@{user_data['username']}" if not user_data['username'].startswith(
                'user_') else f"ID: {user_data['user_id']}"
            users_text += f"*{i}. {username_display}*\n"
            users_text += f"   üí∞ –õ–∏—á–Ω—ã–π: {user_data['total_earnings']}$\n"
            users_text += f"   üë• –†–µ—Ñ: {user_data['referral_earnings']}$\n"
            users_text += f"   üèÜ –û–±—â–∏–π: *{user_data['overall_earnings']}$*\n"
            users_text += "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"

            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å
            if len(users_text) > 3000:
                await update.message.reply_text(users_text, parse_mode='Markdown')
                users_text = "üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)*\n\n"

        if users_text:
            await update.message.reply_text(users_text, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"‚ùå Error in handle_admin_users_with_earnings: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


async def handle_admin_reset_earnings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å –≤—Å–µ—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–æ–≤"""
    try:
        user = update.effective_user

        if user.id != CREATOR_CHAT_ID:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞
        keyboard = [
            [KeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ"), KeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            "‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï!*\n\n"
            "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –í–ï–°–¨ –∑–∞—Ä–∞–±–æ—Ç–æ–∫ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–±—Ä–æ—Å:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error(f"‚ùå Error in handle_admin_reset_earnings: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∫–æ–≤")


async def handle_admin_reset_today_earnings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å –∑–∞—Ä–∞–±–æ—Ç–∫–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        user = update.effective_user

        if user.id != CREATOR_CHAT_ID:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞
        keyboard = [
            [KeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è"), KeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            "‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï!*\n\n"
            "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –°–ï–ì–û–î–ù–Ø.\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error(f"‚ùå Error in handle_admin_reset_today_earnings: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")


async def handle_admin_confirm_reset_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        user = update.effective_user

        if user.id != CREATOR_CHAT_ID:
            return

        success, users_reset, rentals_reset = reset_today_earnings()

        if success:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [KeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                [KeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º")],
                [KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∏")],
                [KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è")],
                [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await update.message.reply_text(
                f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!\n\n"
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
                f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω–æ: {users_reset}\n"
                f"‚Ä¢ –ê—Ä–µ–Ω–¥ —É–¥–∞–ª–µ–Ω–æ: {rentals_reset}",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")

    except Exception as e:
        logger.error(f"‚ùå Error in handle_admin_confirm_reset_today: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")


async def handle_admin_confirm_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–æ–≤"""
    try:
        user = update.effective_user

        if user.id != CREATOR_CHAT_ID:
            return

        if reset_all_earnings():
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [KeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                [KeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º")],
                [KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∏")],
                [KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è")],
                [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await update.message.reply_text(
                "‚úÖ –í—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ –Ω—É–ª—è!",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∫–æ–≤")

    except Exception as e:
        logger.error(f"‚ùå Error in handle_admin_confirm_reset: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∫–æ–≤")


async def handle_admin_cancel_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–æ–≤"""
    try:
        user = update.effective_user

        if user.id != CREATOR_CHAT_ID:
            return

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [KeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º")],
            [KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∏")],
            [KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            "‚ùå –°–±—Ä–æ—Å –∑–∞—Ä–∞–±–æ—Ç–∫–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"‚ùå Error in handle_admin_cancel_reset: {e}")


async def handle_admin_cancel_reset_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        user = update.effective_user

        if user.id != CREATOR_CHAT_ID:
            return

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [KeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º")],
            [KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∏")],
            [KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            "‚ùå –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"‚ùå Error in handle_admin_cancel_reset_today: {e}")


# üî• –¢–û–ü –ó–ê–†–ê–ë–ê–¢–´–í–ê–Æ–©–ò–• –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
async def handle_top_earners_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        user = update.effective_user

        if not has_access(user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ")
            return

        top_earners = get_top_earners()

        if not top_earners:
            await update.message.reply_text(
                "üèÜ *–¢–æ–ø –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏—Ö*\n\n"
                "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º! üí™",
                parse_mode='Markdown'
            )
            return

        top_text = "üèÜ *–¢–æ–ø –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏—Ö –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è*\n\n"

        for i, earner in enumerate(top_earners[:10], 1):  # –¢–æ–ø-10
            username_display = f"@{earner['username']}" if not earner['username'].startswith(
                'user_') else f"ID: {earner['user_id']}"
            top_text += f"*{i}. {username_display}*\n"
            top_text += f"   üèÜ –û–±—â–∏–π: *{earner['overall_earnings']}$*\n"
            top_text += f"   üí∞ –õ–∏—á–Ω—ã–π: {earner['total_earnings']}$\n"
            top_text += f"   üë• –†–µ—Ñ: {earner['referral_earnings']}$\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_data = get_user(user.id)
        if user_data:
            total_earnings = user_data.get("total_earnings", 0)
            referral_earnings = user_data.get("referral_earnings", 0)
            overall_earnings = total_earnings + referral_earnings

            user_position = None
            for i, earner in enumerate(top_earners, 1):
                if earner['user_id'] == user.id:
                    user_position = i
                    break

            if user_position:
                top_text += f"üìä *–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:* *{user_position}*\n"
            top_text += f"üí∞ *–í–∞—à –∑–∞—Ä–∞–±–æ—Ç–æ–∫:* *{overall_earnings}$*"

        await update.message.reply_text(top_text, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"‚ùå Error in handle_top_earners_button: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏—Ö")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
async def handle_back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user

        if user.id != CREATOR_CHAT_ID:
            return

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [KeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä –≤ –∞—Ä–µ–Ω–¥—É")],
            [KeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"), KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton("üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"), KeyboardButton("üèÜ –¢–æ–ø –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏—Ö")],
            [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
            [KeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")]
        ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"‚ùå Error in handle_back_to_menu: {e}")


# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (send_to_user, complete_rental, –∏ —Ç.–¥.)
# ... [–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞]

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ç–æ
async def send_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user

        logger.info(f"üì® Send command received from user {user.id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
        if user.id not in [SPECIAL_USER_ID, CREATOR_CHAT_ID]:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º
        if not update.message.reply_to_message:
            await update.message.reply_text(
                "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –±–æ—Ç–∞\n\n"
                "**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
                "1. –ù–∞–π–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                "2. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π:\n"
                "   - `/send –í–∞—à —Ç–µ–∫—Å—Ç` - –¥–ª—è —Ç–µ–∫—Å—Ç–∞\n"
                "   - `/send –í–∞—à —Ç–µ–∫—Å—Ç` + —Ñ–æ—Ç–æ - –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å —Ñ–æ—Ç–æ\n"
                "   - `/send` + —Ñ–æ—Ç–æ - —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ\n\n"
                "**–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂:**\n"
                "`/complete 120` - –≥–¥–µ 120 —ç—Ç–æ –º–∏–Ω—É—Ç—ã –ø—Ä–æ—Å—Ç–æ—è"
            )
            return

        reply_message = update.message.reply_to_message
        logger.info(f"üîç Replying to message ID: {reply_message.message_id}")

        # –ò—â–µ–º rental –ø–æ message_id (ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞)
        rental = get_rental_by_message_id(reply_message.message_id)
        logger.info(f"üîé Rental found: {rental}")

        if not rental:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä–µ–Ω–¥–µ –ø–æ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
            )
            return

        renter_id = rental[1]  # renter_id –∏–∑ rentals
        phone_number = rental[2]  # phone_number –∏–∑ rentals

        logger.info(f"üë§ Renter ID: {renter_id}, Phone: {phone_number}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ
        if renter_id == user.id:
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        message_text = ' '.join(context.args) if context.args else ""
        logger.info(f"üí¨ Message text from args: '{message_text}'")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
        has_photo = update.message.photo is not None and len(update.message.photo) > 0
        logger.info(f"üì∏ Has photo: {has_photo}")

        if not message_text and not has_photo:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n"
                "‚Ä¢ `/send –í–∞—à –∫–æ–¥: 123456` - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç\n"
                "‚Ä¢ `/send –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è` + —Ñ–æ—Ç–æ - —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ\n"
                "‚Ä¢ `/send` + —Ñ–æ—Ç–æ - —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ —Å –∞–≤—Ç–æ-–ø–æ–¥–ø–∏—Å—å—é\n"
                "‚Ä¢ `/complete 120` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É (120 –º–∏–Ω—É—Ç)"
            )
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ pending_messages
        message_type = "photo" if has_photo else "text"
        message_content = message_text or "–§–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"

        logger.info(f"üíæ Saving message: type={message_type}, content='{message_content}'")

        message_id = add_pending_message(rental[0], renter_id, message_content, message_type)

        if message_id:
            try:
                if has_photo:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                    photo_file = update.message.photo[-1]
                    logger.info(f"üñºÔ∏è Photo file_id: {photo_file.file_id}")

                    caption_text = f"üì® *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\nüì± –î–ª—è –Ω–æ–º–µ—Ä–∞: `{phone_number}`"

                    if message_text:
                        caption_text += f"\n\nüí¨ {message_text}"

                    logger.info(f"üìù Photo caption: {caption_text}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                    await context.bot.send_photo(
                        chat_id=renter_id,
                        photo=photo_file.file_id,
                        caption=caption_text,
                        parse_mode='Markdown'
                    )
                    logger.info(f"‚úÖ Photo successfully sent to user {renter_id}")

                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await context.bot.send_message(
                        chat_id=renter_id,
                        text=f"üì® *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
                             f"üì± –î–ª—è –Ω–æ–º–µ—Ä–∞: `{phone_number}`\n\n"
                             f"üí¨ {message_text}",
                        parse_mode='Markdown'
                    )
                    logger.info(f"‚úÖ Text message successfully sent to user {renter_id}")

                await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

            except Exception as e:
                logger.error(f"‚ùå Error sending message to user {renter_id}: {str(e)}")
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {renter_id}.\n"
                    f"–û—à–∏–±–∫–∞: {str(e)}"
                )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

    except Exception as e:
        logger.error(f"‚ùå Error in send_to_user command: {str(e)}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")


# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã
async def complete_rental(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º
        if user.id not in [SPECIAL_USER_ID, CREATOR_CHAT_ID]:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º
        if not update.message.reply_to_message:
            await update.message.reply_text(
                "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π:\n"
                "/complete 120 - –≥–¥–µ 120 —ç—Ç–æ –º–∏–Ω—É—Ç—ã –ø—Ä–æ—Å—Ç–æ—è"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
        if not context.args or len(context.args) == 0:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç\n"
                "–ü—Ä–∏–º–µ—Ä: /complete 120"
            )
            return

        try:
            minutes = float(context.args[0])
            if minutes <= 0:
                await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return
        except ValueError:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç")
            return

        # –ò—â–µ–º rental
        reply_message = update.message.reply_to_message
        rental = get_rental_by_message_id(reply_message.message_id)

        if not rental:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä–µ–Ω–¥–µ")
            return

        rental_id = rental[0]
        renter_id = rental[1]
        phone_number = rental[2]
        referrer_id = rental[5]

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫
        earnings = minutes * PRICE_PER_MINUTE
        earnings = round(earnings, 2)

        # üî• –ü–†–û–í–ï–†–ö–ê –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ô –í–´–ü–õ–ê–¢–´ (3$)
        MINIMUM_PAYOUT = 1.94
        is_payout_eligible = earnings >= MINIMUM_PAYOUT

        # –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ä–µ–Ω–¥—É –í–°–ï–ì–î–ê, –¥–∞–∂–µ –µ—Å–ª–∏ —Å—É–º–º–∞ –º–∞–ª–µ–Ω—å–∫–∞—è
        if update_rental_earnings(rental_id, minutes, earnings):
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—É–º–º–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã
            if is_payout_eligible:
                update_user_earnings(renter_id, earnings)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            renter_user = get_user(renter_id)
            renter_name = renter_user.get("username", f"user_{renter_id}") if renter_user else f"user_{renter_id}"

            if is_payout_eligible:
                # üî• –°–£–ú–ú–ê –î–û–°–¢–ê–¢–û–ß–ù–ê –î–õ–Ø –í–´–ü–õ–ê–¢–´
                await context.bot.send_message(
                    chat_id=renter_id,
                    text=f"üí∞ –ê—Ä–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                         f"üì± –ù–æ–º–µ—Ä: {phone_number}\n"
                         f"‚è± –í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è: {minutes} –º–∏–Ω—É—Ç\n"
                         f"üíµ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {earnings}$\n\n"
                         f"üíé –¢–∞—Ä–∏—Ñ: {PRICE_PER_MINUTE}$/–º–∏–Ω\n"
                         f"‚úÖ –°—É–º–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã"
                )
            else:
                # üî• –°–£–ú–ú–ê –ú–ê–õ–ï–ù–¨–ö–ê–Ø - —Ç–æ–ª—å–∫–æ –æ—Ç—á–µ—Ç
                needed_minutes = math.ceil((MINIMUM_PAYOUT - earnings) / PRICE_PER_MINUTE)
                await context.bot.send_message(
                    chat_id=renter_id,
                    text=f"üìä –û—Ç—á–µ—Ç –ø–æ –∞—Ä–µ–Ω–¥–µ\n\n"
                         f"üì± –ù–æ–º–µ—Ä: {phone_number}\n"
                         f"‚è± –í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è: {minutes} –º–∏–Ω—É—Ç\n"
                         f"üíµ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {earnings}$\n\n"
                         f"üíé –¢–∞—Ä–∏—Ñ: {PRICE_PER_MINUTE}$/–º–∏–Ω\n"
                         f"‚ö†Ô∏è –°—É–º–º–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤—ã–ø–ª–∞—Ç—ã (1.5$)\n"
                         f"üí° –ù—É–∂–Ω–æ –µ—â–µ: {needed_minutes} –º–∏–Ω—É—Ç –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã"
                )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –ò —Å—É–º–º–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã
            if referrer_id and is_payout_eligible:
                commission = earnings * 0.1
                commission = round(commission, 2)
                update_user_earnings(referrer_id, 0, commission)

                referrer_user = get_user(referrer_id)
                referrer_name = referrer_user.get("username",
                                                  f"user_{referrer_id}") if referrer_user else f"user_{referrer_id}"

                await context.bot.send_message(
                    chat_id=referrer_id,
                    text=f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –∑–∞—Ä–∞–±–æ—Ç–∞–ª!\n\n"
                         f"üë§ –†–µ—Ñ–µ—Ä–∞–ª: {renter_name}\n"
                         f"üì± –ù–æ–º–µ—Ä: {phone_number}\n"
                         f"‚è± –í—Ä–µ–º—è: {minutes} –º–∏–Ω—É—Ç\n"
                         f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {earnings}$\n"
                         f"üíµ –í–∞—à–∞ –∫–æ–º–∏—Å—Å–∏—è (10%): {commission}$"
                )

            # –û—Ç–≤–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if is_payout_eligible:
                await update.message.reply_text(
                    f"‚úÖ –ê—Ä–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    f"üì± –ù–æ–º–µ—Ä: {phone_number}\n"
                    f"‚è± –ú–∏–Ω—É—Ç: {minutes}\n"
                    f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {earnings}$\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {renter_name}\n"
                    f"üë• –†–µ—Ñ–µ—Ä–µ—Ä: {referrer_name if referrer_id else '–ù–µ—Ç'}\n\n"
                    f"üí≥ –°—É–º–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã"
                )
            else:
                await update.message.reply_text(
                    f"üìä –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n"
                    f"üì± –ù–æ–º–µ—Ä: {phone_number}\n"
                    f"‚è± –ú–∏–Ω—É—Ç: {minutes}\n"
                    f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {earnings}$\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {renter_name}\n\n"
                    f"‚ö†Ô∏è –°—É–º–º–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤—ã–ø–ª–∞—Ç—ã (1.5$)\n"
                    f"üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω"
                )

            logger.info(f"‚úÖ Rental {rental_id} completed: {minutes}min, ${earnings}, payout: {is_payout_eligible}")

        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã")

    except Exception as e:
        logger.error(f"‚ùå Error in complete_rental: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
async def referral_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user

        if not has_access(user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        ref_stats = get_referrer_stats(user.id)
        referral_count = ref_stats[0]
        total_commission = ref_stats[1]
        referral_rentals = ref_stats[2]

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = get_user(user.id)
        total_earnings = user_data.get("total_earnings", 0) if user_data else 0
        referral_earnings = user_data.get("referral_earnings", 0) if user_data else 0
        overall_earnings = total_earnings + referral_earnings

        if referral_count == 0:
            stats_text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*\n\n"
            stats_text += "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n"
            stats_text += "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 10% –æ—Ç –∏—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–∞!\n\n"
            stats_text += f"üíµ –í–∞—à –æ–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: *{overall_earnings}$*\n"
            stats_text += f"  ‚îú –õ–∏—á–Ω—ã–π: {total_earnings}$\n"
            stats_text += f"  ‚îî –° —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referral_earnings}$"

            await update.message.reply_text(stats_text, parse_mode='Markdown')
            return

        stats_text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*\n\n"
        stats_text += f"üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{referral_count}*\n"
        stats_text += f"üí∞ –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: *{total_commission:.2f}$*\n\n"
        stats_text += f"üíµ *–í–∞—à –æ–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫:* *{overall_earnings}$*\n"
        stats_text += f"  ‚îú –õ–∏—á–Ω—ã–π: {total_earnings}$\n"
        stats_text += f"  ‚îî –° —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referral_earnings}$\n\n"

        if referral_rentals:
            stats_text += "üìà *–ê—Ä–µ–Ω–¥—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:*\n\n"
            for rental in referral_rentals[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
                stats_text += (
                    f"üë§ @{rental['username']}\n"
                    f"üì± {rental['phone']}\n"
                    f"‚è± {rental['minutes']} –º–∏–Ω ‚Üí {rental['earnings']:.2f}$\n"
                    f"üíµ –í–∞—à–∞ –∫–æ–º–∏—Å—Å–∏—è: *{rental['commission']:.2f}$*\n"
                    f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                )

            if len(referral_rentals) > 10:
                stats_text += f"\n... –∏ –µ—â–µ {len(referral_rentals) - 10} –∞—Ä–µ–Ω–¥"
        else:
            stats_text += "üì≠ –£ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –µ—â–µ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∞—Ä–µ–Ω–¥"

        await update.message.reply_text(stats_text, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"‚ùå Error in referral_stats: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–¥–∞—Ç—å –Ω–æ–º–µ—Ä –≤ –∞—Ä–µ–Ω–¥—É"
async def handle_rent_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not has_access(user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ")
            return

        await update.message.reply_text(
            f"üì± *–°–¥–∞—á–∞ –Ω–æ–º–µ—Ä–∞ –≤ –∞—Ä–µ–Ω–¥—É*\n\n"
            f"üí∞ *–¢–∞—Ä–∏—Ñ:* {PRICE_PER_MINUTE}$ –∑–∞ –º–∏–Ω—É—Ç—É\n"
            f"üí≥ *–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞:* 3–º–∏–Ω—É—Ç—ã\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "*–†–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞:*\n"
            "‚Ä¢ +79123456789\n"
            "‚Ä¢ 89123456789\n"
            "‚Ä¢ 79123456789\n\n"
            "*–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞:*\n"
            "‚Ä¢ +77123456789\n"
            "‚Ä¢ 87123456789\n"
            "‚Ä¢ 77123456789\n\n"
            "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ –æ–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–¥–∞–Ω –≤ –∞—Ä–µ–Ω–¥—É.",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"‚ùå Error in handle_rent_button: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def handle_phone_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not has_access(user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ")
            return

        message_text = update.message.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        validated_phone = validate_phone_number(message_text)

        if not validated_phone:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n\n"
                "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                "*–†–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞:*\n"
                "‚Ä¢ +79123456789\n"
                "‚Ä¢ 89123456789\n"
                "‚Ä¢ 79123456789\n\n"
                "*–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞:*\n"
                "‚Ä¢ +77123456789\n"
                "‚Ä¢ 87123456789\n"
                "‚Ä¢ 77123456789\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode='Markdown'
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–µ—Ä–µ
        user_data = get_user(user.id)
        referrer_id = user_data.get("referrer_id") if user_data else None

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–µ—Ä–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        referrer_info = ""
        if referrer_id:
            referrer_user = get_user(referrer_id)
            if referrer_user:
                referrer_name = referrer_user.get("username", f"user_{referrer_id}")
                referrer_info = f"üë• –†–µ—Ñ–µ—Ä–µ—Ä: @{referrer_name} (ID: {referrer_id})"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
        message_id = None
        if SPECIAL_USER_ID != user.id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ Markdown –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
                message_text_to_admin = (
                    f"üì± –ù–û–í–´–ô –ù–û–ú–ï–† –î–õ–Ø –ê–†–ï–ù–î–´\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}\n"
                    f"üÜî User ID: {user.id}\n"
                    f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {validated_phone}\n"
                    f"üí∞ –¢–∞—Ä–∏—Ñ: {PRICE_PER_MINUTE}$/–º–∏–Ω\n"
                )

                if referrer_info:
                    message_text_to_admin += f"{referrer_info}\n\n"
                else:
                    message_text_to_admin += "\n"

                message_text_to_admin += (
                    f"üí¨ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n"
                    f"`/send –í–∞—à —Ç–µ–∫—Å—Ç` + —Ñ–æ—Ç–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ\n\n"
                    f"üí∞ –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂:\n"
                    f"`/complete 120` - –≥–¥–µ 120 —ç—Ç–æ –º–∏–Ω—É—Ç—ã –ø—Ä–æ—Å—Ç–æ—è"
                )

                sent_message = await context.bot.send_message(
                    chat_id=SPECIAL_USER_ID,
                    text=message_text_to_admin
                )
                message_id = sent_message.message_id
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ SPECIAL_USER_ID {SPECIAL_USER_ID}, message_id: {message_id}")
            except Exception as e:
                logger.error(f"‚ùå Error sending message to special user {SPECIAL_USER_ID}: {e}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ message_id
        else:
            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —è–≤–ª—è–µ—Ç—Å—è SPECIAL_USER_ID, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É")

        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–µ–Ω–¥—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ —Å—É–º–º—ã, –æ–Ω–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –ø–æ–∑–∂–µ)
        rental_id = add_rental(user.id, validated_phone, referrer_id=referrer_id, message_id=message_id)

        if rental_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_text(
                f"‚úÖ *–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–Ω –≤ –∞—Ä–µ–Ω–¥—É!*\n\n"
                f"üìû *–ù–æ–º–µ—Ä:* `{validated_phone}`\n"
                f"üí∞ *–¢–∞—Ä–∏—Ñ:* {PRICE_PER_MINUTE}$ –∑–∞ –º–∏–Ω—É—Ç—É\n\n"
                f"üì® –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.\n"
                f"–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å—á–µ—Ç –ø–ª–∞—Ç–µ–∂–∞.",
                parse_mode='Markdown'
            )

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä –æ—Ç {user.id}: {validated_phone}, rental_id: {rental_id}")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    except Exception as e:
        logger.error(f"‚ùå Error in handle_phone_input: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –ö–æ–º–∞–Ω–¥–∞ /ref
async def ref(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user = update.effective_user

        if not has_access(user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ")
            return

        referral_link = generate_referral_link(user.id)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        try:
            ref_stats = get_referrer_stats(user.id)
            referral_count = ref_stats[0]
            total_commission = ref_stats[1]
        except Exception as e:
            logger.error(f"‚ùå Error getting referrer stats: {e}")
            referral_count = 0
            total_commission = 0.0

        keyboard = [
            [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",
                                  url=f"tg://msg_url?url={referral_link}&text=–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è%20–∫%20–∞—Ä–µ–Ω–¥–µ%20WhatsApp%20–Ω–æ–º–µ—Ä–æ–≤!")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞*\n\n"
            f"üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*\n"
            f"`{referral_link}`\n\n"
            f"*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
            f"‚Ä¢ –ü—Ä–∏–≤–æ–¥–∏—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ\n"
            f"‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ 10% –æ—Ç –∏—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–∞\n"
            f"‚Ä¢ –ë–µ–∑ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–∏ –ª—é–¥–∏ –Ω–µ —Å–º–æ–≥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º\n\n"
            f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{referral_count}*\n"
            f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{total_commission:.2f}$*",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"‚ùå Error in ref: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")


# –ö–æ–º–∞–Ω–¥–∞ /my_stats
async def my_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user

        if not has_access(user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ")
            return

        rentals = get_user_rentals(user.id)
        user_data = get_user(user.id)

        total_earnings = user_data.get("total_earnings", 0) if user_data else 0
        referral_earnings = user_data.get("referral_earnings", 0) if user_data else 0
        overall_earnings = total_earnings + referral_earnings

        if not rentals:
            stats_text = "üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
            stats_text += "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–¥–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.\n"
            stats_text += "–ù–∞–∂–º–∏—Ç–µ \"üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä –≤ –∞—Ä–µ–Ω–¥—É\" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!\n\n"
            stats_text += f"üíµ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: *{overall_earnings}$*\n"
            stats_text += f"  ‚îú –õ–∏—á–Ω—ã–π: {total_earnings}$\n"
            stats_text += f"  ‚îî –° —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referral_earnings}$"

            await update.message.reply_text(stats_text, parse_mode='Markdown')
            return

        total_rentals = len(rentals)
        completed_rentals = [r for r in rentals if r[7] == "completed"]
        total_minutes = sum(rental[9] for rental in completed_rentals if rental[9])

        stats_text = f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        stats_text += f"üìà –í—Å–µ–≥–æ —Å–¥–∞–Ω–æ –Ω–æ–º–µ—Ä–æ–≤: *{total_rentals}*\n"

        if completed_rentals:
            stats_text += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∞—Ä–µ–Ω–¥: *{len(completed_rentals)}*\n"
            stats_text += f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã: *{total_minutes:.1f} –º–∏–Ω—É—Ç*\n\n"

        stats_text += f"üíµ *–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫:* *{overall_earnings}$*\n"
        stats_text += f"  ‚îú –õ–∏—á–Ω—ã–π: {total_earnings}$\n"
        stats_text += f"  ‚îî –° —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referral_earnings}$\n\n"

        if completed_rentals:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∞—Ä–µ–Ω–¥
            stats_text += "üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã:*\n\n"
            for rental in completed_rentals[:5]:
                phone = rental[2]
                minutes = rental[9] or 0
                earnings = rental[4] or 0
                stats_text += f"üì± {phone}\n‚è± {minutes} –º–∏–Ω ‚Üí üíµ {earnings:.2f}$\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"

        await update.message.reply_text(stats_text, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"‚ùå Error in my_stats: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
async def handle_stats_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await my_stats(update, context)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"
async def handle_referral_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await ref(update, context)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"
async def handle_referral_stats_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await referral_stats(update, context)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user

        if not has_access(user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ")
            return

        help_text = (
            f"‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:*\n\n"
            f"üì± *–ö–∞–∫ —Å–¥–∞—Ç—å –Ω–æ–º–µ—Ä –≤ –∞—Ä–µ–Ω–¥—É:*\n"
            f"1. –ù–∞–∂–º–∏—Ç–µ \"üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä –≤ –∞—Ä–µ–Ω–¥—É\"\n"
            f"2. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n"
            f"3. –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n"
            f"4. –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏\n\n"
            f"üìû *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–æ–º–µ—Ä–æ–≤:*\n"
            f"*–†–æ—Å—Å–∏—è:* +79123456789, 89123456789, 79123456789\n"
            f"*–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω:* +77123456789, 87123456789, 77123456789\n\n"
            f"üí∞ *–¢–∞—Ä–∏—Ñ:* {PRICE_PER_MINUTE}$ –∑–∞ –º–∏–Ω—É—Ç—É\n\n"
            f"üí≥ *–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞:* 3–º–∏–Ω—É—Ç—ã\n\n"
            f"üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:*\n"
            f"‚Ä¢ –¢–æ–ª—å–∫–æ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –ª—é–¥–∏ –º–æ–≥—É—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
            f"‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ 10% –æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n"
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"‚Ä¢ \"üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\" - –≤–∞—à–∏ –∞—Ä–µ–Ω–¥—ã –∏ –æ–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫\n"
            f"‚Ä¢ \"üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\" - –¥–æ—Ö–æ–¥ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
            f"‚Ä¢ \"üèÜ –¢–æ–ø –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏—Ö\" - —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è\n\n"
            f"‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º username!\n\n"
            f"‚ùì *–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º:* @kolprey"
        )

        await update.message.reply_text(help_text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"‚ùå Error in help_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–º–æ—â–∏")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
async def handle_back_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user

        if user.id != CREATOR_CHAT_ID:
            return

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [KeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä –≤ –∞—Ä–µ–Ω–¥—É")],
            [KeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"), KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton("üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"), KeyboardButton("üèÜ –¢–æ–ø –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏—Ö")],
            [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
            [KeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")]
        ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"‚ùå Error in handle_back_button: {e}")


def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º JSON –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_json_db()

        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        ensure_admin_user()

        # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω
        data = load_json_data()
        admin_exists = str(CREATOR_CHAT_ID) in data["users"]
        admin_has_access = data["users"].get(str(CREATOR_CHAT_ID), {}).get("has_access", False)

        logger.info(f"üîß Admin check - Exists: {admin_exists}, Has access: {admin_has_access}")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("ref", ref))
        application.add_handler(CommandHandler("my_stats", my_stats))
        application.add_handler(CommandHandler("referral_stats", referral_stats))
        application.add_handler(CommandHandler("send", send_to_user))
        application.add_handler(CommandHandler("complete", complete_rental))
        application.add_handler(CommandHandler("admin", admin_panel))
        application.add_handler(CommandHandler("help", help_command))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        application.add_handler(MessageHandler(filters.Text("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä –≤ –∞—Ä–µ–Ω–¥—É"), handle_rent_button))
        application.add_handler(MessageHandler(filters.Text("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"), handle_referral_button))
        application.add_handler(MessageHandler(filters.Text("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), handle_stats_button))
        application.add_handler(MessageHandler(filters.Text("üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"), handle_referral_stats_button))
        application.add_handler(MessageHandler(filters.Text("üèÜ –¢–æ–ø –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏—Ö"), handle_top_earners_button))
        application.add_handler(MessageHandler(filters.Text("‚ÑπÔ∏è –ü–æ–º–æ—â—å"), help_command))
        application.add_handler(MessageHandler(filters.Text("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"), admin_panel))

        # üî• –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò
        application.add_handler(MessageHandler(filters.Text("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), handle_admin_detailed_stats))
        application.add_handler(
            MessageHandler(filters.Text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º"), handle_admin_users_with_earnings))
        application.add_handler(MessageHandler(filters.Text("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∏"), handle_admin_reset_earnings))
        application.add_handler(
            MessageHandler(filters.Text("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è"), handle_admin_reset_today_earnings))
        application.add_handler(MessageHandler(filters.Text("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ"), handle_admin_confirm_reset))
        application.add_handler(
            MessageHandler(filters.Text("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è"), handle_admin_confirm_reset_today))
        application.add_handler(MessageHandler(filters.Text("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞"), handle_admin_cancel_reset))
        application.add_handler(MessageHandler(filters.Text("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞"), handle_admin_cancel_reset_today))
        application.add_handler(MessageHandler(filters.Text("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"), handle_back_to_menu))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Text(
            ["üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä –≤ –∞—Ä–µ–Ω–¥—É", "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤",
             "üèÜ –¢–æ–ø –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏—Ö", "‚ÑπÔ∏è –ü–æ–º–æ—â—å", "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
             "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º", "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∏",
             "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è", "‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ", "‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è",
             "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]),
                                               handle_phone_input))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–æ—Ç–æ
        application.add_handler(MessageHandler(
            filters.PHOTO & filters.CaptionRegex(r'^/send'),
            send_to_user
        ))

        application.add_handler(MessageHandler(
            filters.PHOTO & filters.REPLY,
            send_to_user
        ))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å JSON –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
        logger.info("ü§ñ Bot started successfully")
        application.run_polling()

    except Exception as e:
        logger.error(f"üí• Fatal error: {e}")
        print(f"üí• Fatal error: {e}")


if __name__ == "__main__":
    main()